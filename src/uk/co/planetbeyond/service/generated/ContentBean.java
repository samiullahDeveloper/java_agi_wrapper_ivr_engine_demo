




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.service.manager.ContentManagerImpl;
import uk.co.planetbeyond.service.generated.GeneratedBean;





import uk.co.planetbeyond.service.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * ContentBean is a mapping of content Table.
 * @author sql2java
*/
@Persistent
public class ContentBean extends BaseContentBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = 7125173706063795334L;
	
    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean fileNameIsModified = false;
    private boolean fileNameIsInitialized = false;

    private boolean contentCategoryIsModified = false;
    private boolean contentCategoryIsInitialized = false;

    private boolean contentIdIsModified = false;
    private boolean contentIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ContentBean is via the createContentBean method in ContentManager or
     * via the factory class ContentFactory create method
     */
    public ContentBean()
    {
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for fileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fileName
     */
    @Override
    public void setFileName(String newVal)
    {
        if ((newVal != null && fileName != null && (newVal.compareTo(fileName) == 0)) ||
            (newVal == null && fileName == null && fileNameIsInitialized)) {
            return;
        }
        fileName = newVal;
        fileNameIsModified = true;
        fileNameIsInitialized = true;
    }

    /**
     * Determines if the fileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFileNameModified()
    {
        return fileNameIsModified;
    }

    /**
     * Manually set whether fileName has been modified or not.
     */
    public void isFileNameModified(boolean value)
    {
        fileNameIsModified = value;
    }	

    /**
     * Determines if the fileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFileNameInitialized()
    {
        return fileNameIsInitialized;
    }

    /**
     * Manually set whether fileName has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isFileNameInitialized(boolean value)
    {
        fileNameIsInitialized = value;
    }



    /**
     * Setter method for contentCategory.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contentCategory
     */
    @Override
    public void setContentCategory(Integer newVal)
    {
        if ((newVal != null && contentCategory != null && (newVal.compareTo(contentCategory) == 0)) ||
            (newVal == null && contentCategory == null && contentCategoryIsInitialized)) {
            return;
        }
        contentCategory = newVal;
        contentCategoryIsModified = true;
        contentCategoryIsInitialized = true;
    }

    /**
     * Setter method for contentCategory.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contentCategory
     */
    public void setContentCategory(int newVal)
    {
        setContentCategory(new Integer(newVal));
    }

    /**
     * Determines if the contentCategory has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentCategoryModified()
    {
        return contentCategoryIsModified;
    }

    /**
     * Manually set whether contentCategory has been modified or not.
     */
    public void isContentCategoryModified(boolean value)
    {
        contentCategoryIsModified = value;
    }	

    /**
     * Determines if the contentCategory has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentCategoryInitialized()
    {
        return contentCategoryIsInitialized;
    }

    /**
     * Manually set whether contentCategory has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isContentCategoryInitialized(boolean value)
    {
        contentCategoryIsInitialized = value;
    }



    /**
     * Setter method for contentId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contentId
     */
    @Override
    public void setContentId(Integer newVal)
    {
        if ((newVal != null && contentId != null && (newVal.compareTo(contentId) == 0)) ||
            (newVal == null && contentId == null && contentIdIsInitialized)) {
            return;
        }
        contentId = newVal;
        contentIdIsModified = true;
        contentIdIsInitialized = true;
    }

    /**
     * Setter method for contentId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contentId
     */
    public void setContentId(int newVal)
    {
        setContentId(new Integer(newVal));
    }

    /**
     * Determines if the contentId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentIdModified()
    {
        return contentIdIsModified;
    }

    /**
     * Manually set whether contentId has been modified or not.
     */
    public void isContentIdModified(boolean value)
    {
        contentIdIsModified = value;
    }	

    /**
     * Determines if the contentId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentIdInitialized()
    {
        return contentIdIsInitialized;
    }

    /**
     * Manually set whether contentId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isContentIdInitialized(boolean value)
    {
        contentIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return creationTimestampIsModified 		|| fileNameIsModified  		|| contentCategoryIsModified  		|| contentIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        creationTimestampIsModified = isModified;
        fileNameIsModified = isModified;
        contentCategoryIsModified = isModified;
        contentIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContentBean bean)
    {
        setCreationTimestamp(bean.getCreationTimestamp());
        setFileName(bean.getFileName());
        setContentCategory(bean.getContentCategory());
        setContentId(bean.getContentId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseContentBean toBaseBean()
    {
	BaseContentBean bean = new BaseContentBean();
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setFileName(getFileName());
        bean.setContentCategory(getContentCategory());
        bean.setContentId(getContentId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(ContentBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	fileNameIsModified = bean.isFileNameModified();
  	fileNameIsInitialized= bean.isFileNameInitialized();
	contentCategoryIsModified = bean.isContentCategoryModified();
  	contentCategoryIsInitialized= bean.isContentCategoryInitialized();
	contentIdIsModified = bean.isContentIdModified();
  	contentIdIsInitialized= bean.isContentIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("file_name", getFileName() == null ? "" : getFileName().toString());
        dictionnary.put("content_category", getContentCategory() == null ? "" : getContentCategory().toString());
        dictionnary.put("content_id", getContentId() == null ? "" : getContentId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("content_id", getContentId() == null ? "" : getContentId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("file_name".equalsIgnoreCase(column) || "fileName".equalsIgnoreCase(column)) {
            return getFileName() == null ? "" : getFileName().toString();
        } else if ("content_category".equalsIgnoreCase(column) || "contentCategory".equalsIgnoreCase(column)) {
            return getContentCategory() == null ? "" : getContentCategory().toString();
        } else if ("content_id".equalsIgnoreCase(column) || "contentId".equalsIgnoreCase(column)) {
            return getContentId() == null ? "" : getContentId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof ContentBean)) {
			return false;
		}

		ContentBean obj = (ContentBean) object;
		return new EqualsBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getFileName(), obj.getFileName())
            .append(getContentCategory(), obj.getContentCategory())
            .append(getContentId(), obj.getContentId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCreationTimestamp())
            .append(getFileName())
            .append(getContentCategory())
            .append(getContentId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("creation_timestamp", getCreationTimestamp())
            .append("file_name", getFileName())
            .append("content_category", getContentCategory())
            .append("content_id", getContentId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ContentBean obj = (ContentBean) object;
        return new CompareToBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getFileName(), obj.getFileName())
            .append(getContentCategory(), obj.getContentCategory())
            .append(getContentId(), obj.getContentId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ContentBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ContentBean save() throws DAOException
    {
        return ContentManagerImpl.getInstance().save(this);
    }

    /**
     * Update the ContentBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ContentBean update() throws DAOException
    {
        return ContentManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the ContentBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public ContentBean insert() throws DAOException
    {
        return ContentManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of ContentBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return ContentManagerImpl.getInstance().createContentBean();
    }

    /**
     * Creates and returns a new instance of ContentBean.
     *
     * @return
     */
    //15
    public static ContentBean newInstance()
    {
        return ContentManagerImpl.getInstance().createContentBean();
    }

    /**
     * Returns manager class for Content
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return ContentManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Content
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "content";
    }



}
