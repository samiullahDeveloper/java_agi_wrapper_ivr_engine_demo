




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.service.generated.UserBean;
import uk.co.planetbeyond.service.generated.UserManager;


/**
 * Comparator class is used to sort the UserBean objects.
 * @author sql2java
 */
public class UserComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for UserComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new UserComparator(UserManager.ID_CALL_DURATION, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>UserManager.ID_CALL_DURATION
     *   <li>UserManager.ID_CALL_ACTION
     *   <li>UserManager.ID_REPONSE_STATUS
     *   <li>UserManager.ID_SUBSCRIPTION_STATUS
     *   <li>UserManager.ID_MSISDN
     * </ul>
     */
    public UserComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for UserComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new UserComparator(UserManager.ID_CALL_DURATION, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>UserManager.ID_CALL_DURATION
     *   <li>UserManager.ID_CALL_ACTION
     *   <li>UserManager.ID_REPONSE_STATUS
     *   <li>UserManager.ID_SUBSCRIPTION_STATUS
     *   <li>UserManager.ID_MSISDN
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public UserComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        UserBean b1 = (UserBean)pObj1;
        UserBean b2 = (UserBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case UserManager.ID_CALL_DURATION:
                if (b1.getCallDuration() == null && b2.getCallDuration() != null) {
                    iReturn = -1;
                } else if (b1.getCallDuration() == null && b2.getCallDuration() == null) {
                    iReturn = 0;
                } else if (b1.getCallDuration() != null && b2.getCallDuration() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCallDuration().compareTo(b2.getCallDuration());
                }
                break;
            case UserManager.ID_CALL_ACTION:
                if (b1.getCallAction() == null && b2.getCallAction() != null) {
                    iReturn = -1;
                } else if (b1.getCallAction() == null && b2.getCallAction() == null) {
                    iReturn = 0;
                } else if (b1.getCallAction() != null && b2.getCallAction() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCallAction().compareTo(b2.getCallAction());
                }
                break;
            case UserManager.ID_REPONSE_STATUS:
                if (b1.getReponseStatus() == null && b2.getReponseStatus() != null) {
                    iReturn = -1;
                } else if (b1.getReponseStatus() == null && b2.getReponseStatus() == null) {
                    iReturn = 0;
                } else if (b1.getReponseStatus() != null && b2.getReponseStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getReponseStatus().compareTo(b2.getReponseStatus());
                }
                break;
            case UserManager.ID_SUBSCRIPTION_STATUS:
                if (b1.getSubscriptionStatus() == null && b2.getSubscriptionStatus() != null) {
                    iReturn = -1;
                } else if (b1.getSubscriptionStatus() == null && b2.getSubscriptionStatus() == null) {
                    iReturn = 0;
                } else if (b1.getSubscriptionStatus() != null && b2.getSubscriptionStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscriptionStatus().compareTo(b2.getSubscriptionStatus());
                }
                break;
            case UserManager.ID_MSISDN:
                if (b1.getMsisdn() == null && b2.getMsisdn() != null) {
                    iReturn = -1;
                } else if (b1.getMsisdn() == null && b2.getMsisdn() == null) {
                    iReturn = 0;
                } else if (b1.getMsisdn() != null && b2.getMsisdn() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMsisdn().compareTo(b2.getMsisdn());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
