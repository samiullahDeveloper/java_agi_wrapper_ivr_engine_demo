




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.service.generated;

import java.io.Serializable;
import com.sleepycat.persist.model.Persistent;
import org.apache.commons.lang.builder.EqualsBuilder;

import uk.co.planetbeyond.service.manager.ContentManagerImpl;

/**
 * ContentBean is a mapping of content Table.
 * @author sql2java
*/
@Persistent
public class BaseContentBean extends BaseGeneratedBean implements Serializable
{
	private static final long serialVersionUID = 7140905848829960880L;
	
    protected java.util.Date creationTimestamp;
    protected String fileName;
    protected Integer contentCategory;
    protected Integer contentId;

    /**
     * Prefered methods to create a ContentBean is via the createContentBean method in ContentManager or
     * via the factory class ContentFactory create method
     */
    public BaseContentBean()
    {
    }

    /**
     * Getter method for creationTimestamp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: content.creation_timestamp</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of creationTimestamp
     */
    public java.util.Date getCreationTimestamp()
    {
        return creationTimestamp;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(java.util.Date newVal)
    {
        creationTimestamp = newVal;
    }

    /**
     * Getter method for fileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: content.file_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of fileName
     */
    public String getFileName()
    {
        return fileName;
    }

    /**
     * Setter method for fileName.
     * <br>
     *
     * @param newVal the new value to be assigned to fileName
     */
    public void setFileName(String newVal)
    {
        fileName = newVal;
    }

    /**
     * Getter method for contentCategory.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: content.content_category</li>
     * <li>comments: 1-Entertainment
2-Sports
3-Health & Fitness
4-Literature
5.Science & Technology</li>
     * <li>column size: 3</li>
     * <li>jdbc type returned by the driver: Types.TINYINT</li>
     * </ul>
     *
     * @return the value of contentCategory
     */
    public Integer getContentCategory()
    {
        return contentCategory;
    }

    /**
     * Setter method for contentCategory.
     * <br>
     *
     * @param newVal the new value to be assigned to contentCategory
     */
    public void setContentCategory(Integer newVal)
    {
        contentCategory = newVal;
    }

    /**
     * Getter method for contentId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: content.content_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of contentId
     */
    public Integer getContentId()
    {
        return contentId;
    }

    /**
     * Setter method for contentId.
     * <br>
     *
     * @param newVal the new value to be assigned to contentId
     */
    public void setContentId(Integer newVal)
    {
        contentId = newVal;
    }


    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(BaseContentBean bean)
    {
        setCreationTimestamp(bean.getCreationTimestamp());
        setFileName(bean.getFileName());
        setContentCategory(bean.getContentCategory());
        setContentId(bean.getContentId());
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof BaseContentBean)) {
			return false;
		}

		BaseContentBean obj = (BaseContentBean) object;
		return new EqualsBuilder()
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getFileName(), obj.getFileName())
            .append(getContentCategory(), obj.getContentCategory())
            .append(getContentId(), obj.getContentId())
            .isEquals();
	}


    /**
     * Converts the current object to full form of the bean which includes all utility methods as well
     */
    public ContentBean toManagedBean()
    {
	ContentBean bean = ContentManagerImpl.getInstance().createContentBean();
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setFileName(getFileName());
        bean.setContentCategory(getContentCategory());
        bean.setContentId(getContentId());
	return bean;
    }
}
